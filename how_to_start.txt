01. Login to BTP
02. Go to dev space : capmvxj
03. open folder : /home/user/projects/
04. open new terminal - install @sap/cds-dk globally by using command : npm add -g @sap/cds-dk
05. give the command in terminal : cds init bookshop
06. it will create a new project by name bookshop
07. open folder :  /home/user/projects/bookshop
08. go to terminal and run the command : cds add tiny-sample
09. it will add the sample content to db/data/my.bookshop-Books.cds, data-model.cds, srv/cat-service.cds files
10. run the command : npm install --> this will create a folder with node_modules
11. run the application using the command : cds run, The application will run in the port 4004 with link https://port4004-workspaces-ws-t54rt.us10.trial.applicationstudio.cloud.sap/
12. command : cds env get folders will give you the default folders 
    output : { db: 'db/', srv: 'srv/', app: 'app/' }
13. command : cds env get roots  will give you where the .cds files to check
    output : [ 'db/', 'srv/', 'app/', 'schema', 'services' ]  --> hardcoded names of files schema and services
    hence only schema.cds or services.cds will work as default and servered as cds service and no other file names
    if you want to server other .cds files then put these files into either of default folders ex: db, srv or app
14. if you run the command cds watch
    output :     watch
	PS C:\Users\VAID1KOR\CAP_Projects\mytrial_u001\sample> cds watch
 	
	cds serve all --with-mocks --in-memory? 
	live reload enabled for browsers 
	
      ___________________________
 

    	No models found in db/,srv/,app/,schema,services.
    	Waiting for some to arrive...

15. you can see .cds files are looked into db/,srv/,app/ also hardcoded file names - schema.cds and services.cds
16. one more special file index.html if this file found in app/ folder then this will be defaulty servered.
    You can create a empty cds file ex: services.cds / schema.cds and 
    run the command cds watch
    output :  This is an automatically generated page.
	You can replace it with a custom ./app/index.html.
	now we will create a index.html file inside app/ folder and 
    run cds watch
    output : The default page will be rendered for : http://localhost:4004/

17. now create a empty service inside server.cds file as below
    service say {} and run the command cds watch
    output : Service Endpoints:
	/odata/v4/say/ $metadata

    default we will get /odata/v4  service with service name 
    /odata/v4 is defult path for .cds services

18. run the command : cds env protocols
    output : {
  'odata-v4': { path: '/odata/v4' },		--> this is default path you will get it
  'odata-v2': { path: '/odata/v2' },
  rest: { path: '/rest' },
  hcql: { path: '/hcql' }
}

19. what is difference between function import and actions
    functions (import functions) can not modify the data      : GET        --> also you should have a handler to serve the service
    actions modifies the data, actions will have side effects : PUT / POST,
    You will not able to call Action with GET but use POST
    ex : service.cds
         service say {
  			function hello (to:String) returns String;
	}
   
   create a new file service.js and write below code - 
	module.exports = (say)=>{
  		say.on ('hello', req => `Hello ${req.data.to}!`)
	}
   OR
   
   const sayHello = (say) => {
    		say.on('hello', (req, res) => {
        		return 'Hello from : ' + req.data.to;
    			});
   		}
   		
   module.exports = sayHello;

Session : 4

20. cds compile services.cds --to sql 
    this will give a how the service will generate the corresponding sql query for table creation
    ex : 
       services.cds file having below content
       service bookshop 
	{
    		entity Books {
        				key id : Integer;
        				title : String(30);
    				}
	}
	
	once you run the command -  cds compile services.cds --to sql 
      it will generate below output
      CREATE TABLE bookshop_Books (
  						id INTEGER NOT NULL,
  						title NVARCHAR(30),
  						PRIMARY KEY(id)
						);

	Based on table name you can see its generated based on Service_name + '_' + Entity_name
      ex: bookshop_Books

Session : 5

21. how to trigger the curd operations - using http file
    create a test.http file and add the following lines
     	###
	# @name BooksQuery
	GET http://localhost:4004/odata/v4/bookshop/Books

	###
	# @name BooksInsert
	POST http://localhost:4004/odata/v4/bookshop/Books
	Content-Type: application/json

	{"title" : "ABAP"}

	###
	# @name DeleteEntry
	@books_id = {{BooksQuery.response.body.value[0].ID}}
	GET http://localhost:4004/odata/v4/bookshop/Books({{books_id}})
	
	###
	DELETE http://localhost:4004/odata/v4/bookshop/Books({{books_id}})

   Use can also use Thunder client to perform these operations
   	GET call
   	GET http://localhost:4004/odata/v4/bookshop/Books
  
   	POST call
	POST http://localhost:4004/odata/v4/bookshop/Books
	and set the body as 
	{"title" : "SAP UI5"}

	Delete call
	http://localhost:4004/odata/v4/bookshop/Books(ID=de97d0bd-b430-4819-bb59-dc761cb3bf12)
	give the UUID key is without a single/double quotes else you will get error
	and without body
 
Session : 6

22. Deploy to sqlite database as persistant database sqlite.
	run the command : npm add @cap-js/sqlite -D
	This will add "devDependencies": {
    							"@cap-js/sqlite": "^1.7.3", 
                                       }
	run the command cds env requires.db
	you will get output as 
	{
  		impl: '@cap-js/sqlite',
  		credentials: { url: ':memory:' },
  		kind: 'sqlite'
	}
	This is a defult config and try to run deployment from in-memory database.
	we will overwrite the default configuration from in-memory database to sqlite database with filename as db.sqlite
	you can also change the filename to booksdata.sqlite as well
	modify the packages.json file and add the below code
	"cds": 
		{ 
		"requires": 
			{
   			"db": {
      			"kind": "sqlite",
      			"credentials": { "url": "db.sqlite" } 
   				}
			}
		}
	Then run cds deploy
	
23. How to generate UUID using bash
	Go to terminal and type the command : node and hit enter
	give the command : > require("crypto").randomUUID()
	output  : this will generate the UUID

	also UUID can be generated using cds.utils.UUID()
	cds repl
	> cds.utils.uuid()
	3ee21e2c-c583-47b0-a8df-a642392c7a11
	
	control + D to terminate the repl.

24. if you add an additional aspect country in services.cds
	using { cuid, managed, Country } from '@sap/cds/common';
	entity Author : cuid {
        name : String(30);
        authorfrom : Country;
    	}
	Added new feild authorfrom as Country

	now run the command : cds deploy to reflect the latest changes from services.cds file
	now run the command : cds c services.cds --to sql
	output:

	CREATE TABLE bookshop_Books (
  	ID NVARCHAR(36) NOT NULL,
  	title NVARCHAR(30),
  	PRIMARY KEY(ID)
	);

	CREATE TABLE bookshop_Author (
  	ID NVARCHAR(36) NOT NULL,
  	name NVARCHAR(30),
  	authorfrom_code NVARCHAR(3),
  	PRIMARY KEY(ID)
	);

	CREATE TABLE sap_common_Countries (
  	name NVARCHAR(255),
  	descr NVARCHAR(1000),
  	code NVARCHAR(3) NOT NULL,
  	PRIMARY KEY(code)
	);

	CREATE TABLE sap_common_Countries_texts (
  	locale NVARCHAR(14) NOT NULL,
  	name NVARCHAR(255),
  	descr NVARCHAR(1000),
  	code NVARCHAR(3) NOT NULL,
  	PRIMARY KEY(locale, code)
	);

	CREATE VIEW bookshop_Countries AS SELECT
  	Countries_0.name,
  	Countries_0.descr,
  	Countries_0.code
	FROM sap_common_Countries AS Countries_0;

	CREATE VIEW bookshop_Countries_texts AS SELECT
  	texts_0.locale,
  	texts_0.name,
  	texts_0.descr,
  	texts_0.code
	FROM sap_common_Countries_texts AS texts_0;

	CREATE VIEW localized_sap_common_Countries AS SELECT
  	coalesce(localized_1.name, L_0.name) AS name,
  	coalesce(localized_1.descr, L_0.descr) AS descr,
  	L_0.code
	FROM (sap_common_Countries AS L_0 LEFT JOIN sap_common_Countries_texts AS localized_1 
	ON localized_1.code = L_0.code AND localized_1.locale = session_context( '$user.locale' ));

	CREATE VIEW localized_bookshop_Author AS SELECT
  	L.ID,
  	L.name,
  	L.authorfrom_code
	FROM bookshop_Author AS L;

	CREATE VIEW localized_bookshop_Countries AS SELECT
  	Countries_0.name,
  	Countries_0.descr,
  	Countries_0.code
	FROM localized_sap_common_Countries AS Countries_0; 
	
25. how to check the tables in sqlite
	Go to terminal and give the command : sqlite3 db.sqlite
	user: youtube001 $ sqlite3 db.sqlite
	SQLite version 3.40.1 2022-12-28 14:03:47
	Enter ".help" for usage hints.
	
	if you want to view all the tables give the command .tables
	sqlite> .tables
	bookshop_Author                 localized_bookshop_Countries  
	bookshop_Books                  localized_sap_common_Countries
	bookshop_Countries              sap_common_Countries          
	bookshop_Countries_texts        sap_common_Countries_texts    
	localized_bookshop_Author 
	
	To view the data from table you can use select query.
	sqlite> select * from bookshop_Author;
	1308b7d7-7ab1-4d04-aae6-6d4381ada692|Srinivas|
	c4db9a37-7e39-4460-9bd1-263254a1b25a|Anand|
	8f4a158a-01a4-4e10-8fee-198f10d32723|Sachin|
	sqlite> 
	
	control + D to come out of sqlite>

Session : 7-8

26. How to do the profiling
	User should able to run the application differently from development, production or custom ways
	modify the package.json file to add the profiles
	  "cds": {
    		"requires": {
      			"db": {
        				"[testing]" :     { "kind": "sqlite","credentials": { "url": "db.sqlite" } },
        				"[development]" : { "kind": "sqlite","credentials": { "url": ":memory:" } }
      				}
    				}
  		}

	if you run the command:  cds watch then default development profile will be executed and as we gave :memory: 
	it will be loaded from .csv files
	if you run the command:  cds watch --profile testing then testing profile will be executed from db.sqlite

27. What is the differnce between Type and aspect
	Type : is used to provide a "value" in key:value pair
	ex: type String20 : String(20);
	entity Books {
				ID : Integer;
				name : String20;  --> instead of using String(20) we can use custom Type as String20.
			}
	ex: type Country : Association to sap.common.Countries;
	entity Author : cuid {
		name : String(30);
		authorfrom : Country;	--> even types can have associations
	}

	aspect : is used to provide a additional fields into entity
	ex: using { cuid, managed, Country } from '@sap/cds/common';
	entity Books : cuid {			--> cuid is a aspect and add key ID : UUID extra key-value pair 
						    in enity Books 
			title : String(30);
	}
	
	aspect cuid {
  		key ID : UUID; //> automatically filled in
	}

28. How to add associations between Books and Authors entity.
	ex: we will consider Books is connected to Authors using authod_ID feild and we will consider its 1:1 relation
 	Each book have single Author
	
	service bookshop {
    		entity Books : cuid {
        			title : String(30);
        			author : Association to one Author;
    			}

    		entity Author : cuid {
        			name : String(30);
        			authorfrom : Country;
    				}

	}
	when we run the command :  cds compile services.cds --to sql
	CREATE TABLE bookshop_Books (
  	ID NVARCHAR(36) NOT NULL,
  	title NVARCHAR(30),
  	author_ID NVARCHAR(36),		--> this feild author has been replaced with author_ID and ID is key feild 
					    for Author table hence author_ID is added
  	PRIMARY KEY(ID)
	);

	CREATE TABLE bookshop_Author (
  	ID NVARCHAR(36) NOT NULL,
  	name NVARCHAR(30),
  	authorfrom_code NVARCHAR(3),
  	PRIMARY KEY(ID)
	);

	also new navigation property will be added in metadata.
	You need to modify the bookshop-Books.csv file and add new column author_ID and add the values based on 
	Authors table
	  "value": [
    		{
      	"ID": "1bb5778e-4a6f-462a-9b64-bf9f7c782bbf",
      	"title": "Java",
      	"author_ID": null
    		},
	After adding the author_ID in csv file
	  "value": [
    	{
      	"ID": "1bb5778e-4a6f-462a-9b64-bf9f7c782bbf",
      	"title": "Java",
      	"author_ID": "1308b7d7-7ab1-4d04-aae6-6d4381ada692"
    	},

	<EntitySet Name="Books" EntityType="bookshop.Books">
	<NavigationPropertyBinding Path="author" Target="Author"/>
	</EntitySet>
	
	You can access Authors table using expand query - /odata/v4/bookshop/Books?$expand=author
	  "value": [
    	{
      	"ID": "1bb5778e-4a6f-462a-9b64-bf9f7c782bbf",
      	"title": "Java",
      	"author_ID": "1308b7d7-7ab1-4d04-aae6-6d4381ada692",
      	"author": {
        		"ID": "1308b7d7-7ab1-4d04-aae6-6d4381ada692",
        		"name": "Srinivas",
        		"authorfrom_code": null
      	}
    	},
	
	You can update the test.http file with below code
	GET http://localhost:4004/odata/v4/bookshop/Books?$expand=author

29. all code from qmacro is avaialbe in git : https://github.com/qmacro/capb2b.git

30. To get the common content for country, currency kind of database you can use
	npm i @sap/cds-common-content
	sap.common.Countries
	sap.common.Currencies
	sap.common.Languages
	sap.common.Timezones
	
	Before you use first you need to install using command : 
	npm i @sap/cds-common-content
	
	and import it in services.cds file
	using from '@sap/cds-common-content';

Session : 9
	
31. Split the service.cds file to write database (schema) and service saparately
    provide the namespace in schema.cds file as vxj.database;
    create a new project - YOUTUBE002

	create a directory : mkdir youtube002
	Navigate to directory : cd youtube002
	open folder youtube002
	initialize the project : cds init --> this will create the default folders 
	like: db/, app/ and srv and packpage.json file
	install the dependency for sqlite : run the command : npm add @cap-js/sqlite -D
	modify the package.json file to point to persistant database : 
		"cds": 
		{ 
		"requires": 
			{
   			"db": {
      			"kind": "sqlite",
      			"credentials": { "url": "vxjdb.sqlite" } 
   				}
			}
		}
	run the command : npm install --> this will create a folder with node_modules
	
	Add the association between Books and Authors tables using 
	Books : { ...
		author : Association to Authors; --> this will create a new column in Books entiry as author_ID
		}
	Authors : { ...
		books : Association to many Books on books.author = $self; --> there is no change in table defination
                 }

	
	create main.cds file inside srv/ folder
	inside main.cds we can bring the schema from db/schema.cds file using
	using { vxj.database as vxjdb }  from '../db/schema';  --> here we can define the alias for vxj.database as vxjdb
	and refer vxjdb to get Books and Authors entiry
	
	when you create a service in .cds file then it will create the VIEWS corresponding to entity tables
	ex: 
	using { vxj.database as vxjdb }  from '../db/schema';
	service bookshop {
    				entity Books as projection on vxjdb.Books;
    				entity Authors as projection on vxjdb.Authors;
				}
	if you view the preview as sql then you will see below details
	
	Below 2 tables are coming because of line --> using { vxj.database as vxjdb }  from '../db/schema';
	Below 2 views are coming because of service is having projection on
	view name is based on service name (bookshop_)

	CREATE TABLE vxj_database_Books (
  	ID NVARCHAR(36) NOT NULL,
  	title NVARCHAR(30),
  	author_ID NVARCHAR(36),
  	PRIMARY KEY(ID)
	);

	CREATE TABLE vxj_database_Authors (		--> view is created because of service is having projection on
  	ID NVARCHAR(36) NOT NULL,
  	name NVARCHAR(30),
  	PRIMARY KEY(ID)
	);

	CREATE VIEW bookshop_Books AS SELECT	
  	Books_0.ID,
  	Books_0.title,
  	Books_0.author_ID
	FROM vxj_database_Books AS Books_0;

	CREATE VIEW bookshop_Authors AS SELECT	--> view is created because of service is having projection on
  	Authors_0.ID,
  	Authors_0.name
	FROM vxj_database_Authors AS Authors_0;

	to remove empty directory use can use command : rmdir <dirname>
	to remove directory with sub directory and files : rm -r <dirname> : 
	make sure you navigate to parent directory first.

	we will load the data to Books and Authors entiry tables
	To generate UUID you can make use of repl in terminal
	give the command : cds repl
	Welcome to cds repl v 7.9.4 
	> cds.utils.uuid()
	f821f22c-dbad-4a8f-871f-f82c00baf942
	control + D to come out of cds repl

	remove below content from package.json file
	
	"cds": 
	{ 
	"requires": 
		{
		"db": {
		"kind": "sqlite",
		"credentials": { "url": "vxjdb.sqlite" } 
			}
		}
	}
	
	now if you run cds watch : the default it will run from :memory database

	we will deploy to persitant layer and now update package.json file
 
	"cds": 
	{ 
	"requires": 
		{
		"db": {
		"kind": "sqlite",
		"credentials": { "url": "vxjdb.sqlite" } 
			}
		}
	}
	now try to run the command : cds watch
	The service will be running but if you try to click on Books you will get error
	
	<error xmlns="http://docs.oasis-open.org/odata/ns/metadata">
	<code>500</code>
	<message>no such table: bookshop_Books in: 
	SELECT json_insert('{}','$."ID"',ID,'$."title"',title,'$."author_ID"',author_ID) as _json_ FROM 
	(SELECT Books.ID,Books.title,Books.author_ID FROM bookshop_Books as Books ORDER BY Books.ID ASC LIMIT ?)</message>
	</error>
	
	Because now Books table is trying to access from vxjdb.sqlite persitant file. 
	To fix this issue you need to deploy it using
	Then run command : cds deploy --profile testing : --> to reflect the schema.cds into persitant vxjdb file
	with table structure
	Note : If you have added profiles then you need to use --profile while deploying as well.
	after changing the package.json file
	"cds": {
	"requires": {
		"db": {
				"[testing]" :     { "kind": "sqlite","credentials": { "url": "vxjdb.sqlite" } },
				"[development]" : { "kind": "sqlite","credentials": { "url": ":memory:" } }
			}
			}
	}


32. Difference Between Association and Composition
	Association : will work with 2 independent entities where there may or may not have direct relationship
	ex: Books and Authors these can be 2 independed activies and may not have any relation / connection between them
	In such case we can build the relation using Association by adding Association to Entity_Name

	Composition: will work with 2 dependent entities where there will be a relation between 2 entities
	ex: OrderHeader and OrderLine entities
	composition is written with of keywork like Composition of Entity_Name


Session 10

33. added the Composition logic to schema.cds file
	entity Orders : cuid {
    		comments : String(20);
    		Items : Composition of many OrderItems on Items.parent = $self;
	}

	entity OrderItems  {
    		key parent : Association to Orders;
    		key pos : Integer;
    		quantity : Integer;
	}

	Added only Orders entity into main.cds file
	entity Orders as projection on vxjdb.Orders;

	add the data to Orders and OrderItems tables 
	0dfffa4b-7a5b-4dfa-80d7-066329113f26
	4f6c7016-bbd0-4c04-8015-1dcbdbd3c323
	
	run the command : cds watch
	You will able to view the data loading from in memory database. and you will able to view the Orders data
	
	we have exposed only Orders entity but we have not exposed OrderItems entity in main.cds file
	As Compositions have a special things - Composition Targets (OrderItems) are auto-exposed in service interface.
	hence we will able to view the data of OrderItems by using expand=OrderItems
	You can see this in metadata as well
	<EntityType Name="Orders">
	<Key>
	<PropertyRef Name="ID"/>
	</Key>
	<Property Name="ID" Type="Edm.Guid" Nullable="false"/>
	<Property Name="comments" Type="Edm.String"/>
	<NavigationProperty Name="Items" Type="Collection(bookshop.OrderItems)" Partner="parent">
	<OnDelete Action="Cascade"/>
	</NavigationProperty>
	</EntityType>

	<EntityType Name="OrderItems">
	<Key>
	<PropertyRef Name="parent_ID"/>
	<PropertyRef Name="pos"/>
	</Key>
	<NavigationProperty Name="parent" Type="bookshop.Orders" Partner="Items">
	<ReferentialConstraint Property="parent_ID" ReferencedProperty="ID"/>
	</NavigationProperty>

	<Property Name="parent_ID" Type="Edm.Guid" Nullable="false"/>
	<Property Name="pos" Type="Edm.Int32" Nullable="false"/>
	<Property Name="quantity" Type="Edm.Int32"/>
	</EntityType>
	
	and if you do a preview of main.cds as yaml you will see the property
	  bookshop.OrderItems: 
    	  kind: entity
    	 '@cds.autoexposed': true	--> default autoexposed (past tense)
	
	You can use ?$expand=Items
	https://port4004-workspaces-ws-t54rt.us10.trial.applicationstudio.cloud.sap/odata/v4/bookshop/Orders?$expand=Items
	and you will able to view the data for OrderItems as well
	
	still if you want to auto-expose the OrderItems you can make use of annotations
	do the changes in schema.cds and add below line before OrderItems entity
	@cds.autoexpose		--> just add this line
	entity OrderItems  {
   	 	key parent : Association to Orders;
    		key pos : Integer;
    		quantity : Integer;
		}
	and you will able to see OrderItems → Fiori preview : which was not there previously

Session 11

34. How to checking if localhost 4004 is already using and would like to kill
	user: youtube002 $ lsof -i tcp:4004
	COMMAND  PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
	node    4638 user   25u  IPv6 6667854      0t0  TCP *:4004 (LISTEN)

	user: youtube002 $ kill -9 4638
	user: youtube002 $ lsof -i tcp:4004


35. Instead of creating 2 different entities and create a composition between, we can do the same using single entity
	entity SalesOrder : cuid {
    	description : String(30);
    	Items       : Composition of many {
                      key pos      : Integer;
                          book     : Association to Books;
                          quantity : Integer;
                  	}
	}

	In this case below 2 tables will be created and there is no need to provide the parent key field
	The system will automatically create a new feild call up__<key> : key of parent node
	
	CREATE TABLE vxj_database_SalesOrder (
  		ID NVARCHAR(36) NOT NULL,
  		description NVARCHAR(30),
  		PRIMARY KEY(ID)
	);

	CREATE TABLE vxj_database_SalesOrder_Items (
  		up__ID NVARCHAR(36) NOT NULL,
  		pos INTEGER NOT NULL,
  		book_ID NVARCHAR(36),
  		quantity INTEGER,
  		PRIMARY KEY(up__ID, pos)
	); 

sinity
   
    
