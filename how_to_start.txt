01. Login to BTP
02. Go to dev space : capmvxj
03. open folder : /home/user/projects/
04. open new terminal - install @sap/cds-dk globally by using command : npm add -g @sap/cds-dk
05. give the command in terminal : cds init bookshop
06. it will create a new project by name bookshop
07. open folder :  /home/user/projects/bookshop
08. go to terminal and run the command : cds add tiny-sample
09. it will add the sample content to db/data/my.bookshop-Books.cds, data-model.cds, srv/cat-service.cds files
10. run the command : npm install --> this will create a folder with node_modules
11. run the application using the command : cds run, The application will run in the port 4004 with link https://port4004-workspaces-ws-t54rt.us10.trial.applicationstudio.cloud.sap/
12. command : cds env get folders will give you the default folders 
    output : { db: 'db/', srv: 'srv/', app: 'app/' }
13. command : cds env get roots  will give you where the .cds files to check
    output : [ 'db/', 'srv/', 'app/', 'schema', 'services' ]  --> hardcoded names of files schema and services
    hence only schema.cds or services.cds will work as default and servered as cds service and no other file names
    if you want to server other .cds files then put these files into either of default folders ex: db, srv or app
14. if you run the command cds watch
    output :     watch
	PS C:\Users\VAID1KOR\CAP_Projects\mytrial_u001\sample> cds watch
 	
	cds serve all --with-mocks --in-memory? 
	live reload enabled for browsers 
	
      ___________________________
 

    	No models found in db/,srv/,app/,schema,services.
    	Waiting for some to arrive...

15. you can see .cds files are looked into db/,srv/,app/ also hardcoded file names - schema.cds and services.cds
16. one more special file index.html if this file found in app/ folder then this will be defaulty servered.
    You can create a empty cds file ex: services.cds / schema.cds and 
    run the command cds watch
    output :  This is an automatically generated page.
	You can replace it with a custom ./app/index.html.
	now we will create a index.html file inside app/ folder and 
    run cds watch
    output : The default page will be rendered for : http://localhost:4004/

17. now create a empty service inside server.cds file as below
    service say {} and run the command cds watch
    output : Service Endpoints:
	/odata/v4/say/ $metadata

    default we will get /odata/v4  service with service name 
    /odata/v4 is defult path for .cds services

18. run the command : cds env protocols
    output : {
  'odata-v4': { path: '/odata/v4' },		--> this is default path you will get it
  'odata-v2': { path: '/odata/v2' },
  rest: { path: '/rest' },
  hcql: { path: '/hcql' }
}

19. what is difference between function import and actions
    functions (import functions) can not modify the data      : GET        --> also you should have a handler to serve the service
    actions modifies the data, actions will have side effects : PUT / POST,
    You will not able to call Action with GET but use POST
    ex : service.cds
         service say {
  			function hello (to:String) returns String;
	}
   
   create a new file service.js and write below code - 
	module.exports = (say)=>{
  		say.on ('hello', req => `Hello ${req.data.to}!`)
	}
   OR
   
   const sayHello = (say) => {
    		say.on('hello', (req, res) => {
        		return 'Hello from : ' + req.data.to;
    			});
   		}
   		
   module.exports = sayHello;

Session : 4

20. cds compile services.cds --to sql 
    this will give a how the service will generate the corresponding sql query for table creation
    ex : 
       services.cds file having below content
       service bookshop 
	{
    		entity Books {
        				key id : Integer;
        				title : String(30);
    				}
	}
	
	once you run the command -  cds compile services.cds --to sql 
      it will generate below output
      CREATE TABLE bookshop_Books (
  						id INTEGER NOT NULL,
  						title NVARCHAR(30),
  						PRIMARY KEY(id)
						);

	Based on table name you can see its generated based on Service_name + '_' + Entity_name
      ex: bookshop_Books

Session : 5

21. how to trigger the curd operations - using http file
    create a test.http file and add the following lines
     	###
	# @name BooksQuery
	GET http://localhost:4004/odata/v4/bookshop/Books

	###
	# @name BooksInsert
	POST http://localhost:4004/odata/v4/bookshop/Books
	Content-Type: application/json

	{"title" : "ABAP"}

	###
	# @name DeleteEntry
	@books_id = {{BooksQuery.response.body.value[0].ID}}
	GET http://localhost:4004/odata/v4/bookshop/Books({{books_id}})
	
	###
	DELETE http://localhost:4004/odata/v4/bookshop/Books({{books_id}})

   Use can also use Thunder client to perform these operations
   	GET call
   	GET http://localhost:4004/odata/v4/bookshop/Books
  
   	POST call
	POST http://localhost:4004/odata/v4/bookshop/Books
	and set the body as 
	{"title" : "SAP UI5"}

	Delete call
	http://localhost:4004/odata/v4/bookshop/Books(ID=de97d0bd-b430-4819-bb59-dc761cb3bf12)
	give the UUID key is without a single/double quotes else you will get error
	and without body
 
Session : 6

22. Deploy to sqlite database as persistant database sqlite.
	run the command : npm add @cap-js/sqlite -D
	This will add "devDependencies": {
    							"@cap-js/sqlite": "^1.7.3", 
                                       }
	run the command cds env requires.db
	you will get output as 
	{
  		impl: '@cap-js/sqlite',
  		credentials: { url: ':memory:' },
  		kind: 'sqlite'
	}
	This is a defult config and try to run deployment from in-memory database.
	we will overwrite the default configuration from in-memory database to sqlite database with filename as db.sqlite
	you can also change the filename to booksdata.sqlite as well
	modify the packages.json file and add the below code
	"cds": 
		{ 
		"requires": 
			{
   			"db": {
      			"kind": "sqlite",
      			"credentials": { "url": "db.sqlite" } 
   				}
			}
		}
	Then run cds deploy
	
23. How to generate UUID using bash
	Go to terminal and type the command : node and hit enter
	give the command : > require("crypto").randomUUID()
	output  : this will generate the UUID

	also UUID can be generated using cds.utils.UUID()
	cds repl
	> cds.utils.uuid()
	3ee21e2c-c583-47b0-a8df-a642392c7a11
	
	control + D to terminate the repl.

24. if you add an additional aspect country in services.cds
	using { cuid, managed, Country } from '@sap/cds/common';
	entity Author : cuid {
        name : String(30);
        authorfrom : Country;
    	}
	Added new feild authorfrom as Country

	now run the command : cds deploy to reflect the latest changes from services.cds file
	now run the command : cds c services.cds --to sql
	output:

	CREATE TABLE bookshop_Books (
  	ID NVARCHAR(36) NOT NULL,
  	title NVARCHAR(30),
  	PRIMARY KEY(ID)
	);

	CREATE TABLE bookshop_Author (
  	ID NVARCHAR(36) NOT NULL,
  	name NVARCHAR(30),
  	authorfrom_code NVARCHAR(3),
  	PRIMARY KEY(ID)
	);

	CREATE TABLE sap_common_Countries (
  	name NVARCHAR(255),
  	descr NVARCHAR(1000),
  	code NVARCHAR(3) NOT NULL,
  	PRIMARY KEY(code)
	);

	CREATE TABLE sap_common_Countries_texts (
  	locale NVARCHAR(14) NOT NULL,
  	name NVARCHAR(255),
  	descr NVARCHAR(1000),
  	code NVARCHAR(3) NOT NULL,
  	PRIMARY KEY(locale, code)
	);

	CREATE VIEW bookshop_Countries AS SELECT
  	Countries_0.name,
  	Countries_0.descr,
  	Countries_0.code
	FROM sap_common_Countries AS Countries_0;

	CREATE VIEW bookshop_Countries_texts AS SELECT
  	texts_0.locale,
  	texts_0.name,
  	texts_0.descr,
  	texts_0.code
	FROM sap_common_Countries_texts AS texts_0;

	CREATE VIEW localized_sap_common_Countries AS SELECT
  	coalesce(localized_1.name, L_0.name) AS name,
  	coalesce(localized_1.descr, L_0.descr) AS descr,
  	L_0.code
	FROM (sap_common_Countries AS L_0 LEFT JOIN sap_common_Countries_texts AS localized_1 
	ON localized_1.code = L_0.code AND localized_1.locale = session_context( '$user.locale' ));

	CREATE VIEW localized_bookshop_Author AS SELECT
  	L.ID,
  	L.name,
  	L.authorfrom_code
	FROM bookshop_Author AS L;

	CREATE VIEW localized_bookshop_Countries AS SELECT
  	Countries_0.name,
  	Countries_0.descr,
  	Countries_0.code
	FROM localized_sap_common_Countries AS Countries_0; 
	
25. how to check the tables in sqlite
	Go to terminal and give the command : sqlite3 db.sqlite
	user: youtube001 $ sqlite3 db.sqlite
	SQLite version 3.40.1 2022-12-28 14:03:47
	Enter ".help" for usage hints.
	
	if you want to view all the tables give the command .tables
	sqlite> .tables
	bookshop_Author                 localized_bookshop_Countries  
	bookshop_Books                  localized_sap_common_Countries
	bookshop_Countries              sap_common_Countries          
	bookshop_Countries_texts        sap_common_Countries_texts    
	localized_bookshop_Author 
	
	To view the data from table you can use select query.
	sqlite> select * from bookshop_Author;
	1308b7d7-7ab1-4d04-aae6-6d4381ada692|Srinivas|
	c4db9a37-7e39-4460-9bd1-263254a1b25a|Anand|
	8f4a158a-01a4-4e10-8fee-198f10d32723|Sachin|
	sqlite> 
	
	control + D to come out of sqlite>

Session : 7-8

26. How to do the profiling
	User should able to run the application differently from development, production or custom ways
	modify the package.json file to add the profiles
	  "cds": {
    		"requires": {
      			"db": {
        				"[testing]" :     { "kind": "sqlite","credentials": { "url": "db.sqlite" } },
        				"[development]" : { "kind": "sqlite","credentials": { "url": ":memory:" } }
      				}
    				}
  		}

	if you run the command:  cds watch then default development profile will be executed and as we gave :memory: 
	it will be loaded from .csv files
	if you run the command:  cds watch --profile testing then testing profile will be executed from db.sqlite

27. What is the differnce between Type and aspect
	Type : is used to provide a "value" in key:value pair
	ex: type String20 : String(20);
	entity Books {
				ID : Integer;
				name : String20;  --> instead of using String(20) we can use custom Type as String20.
			}
	ex: type Country : Association to sap.common.Countries;
	entity Author : cuid {
		name : String(30);
		authorfrom : Country;	--> even types can have associations
	}

	aspect : is used to provide a additional fields into entity
	ex: using { cuid, managed, Country } from '@sap/cds/common';
	entity Books : cuid {			--> cuid is a aspect and add key ID : UUID extra key-value pair 
						    in enity Books 
			title : String(30);
	}
	
	aspect cuid {
  		key ID : UUID; //> automatically filled in
	}

28. How to add associations between Books and Authors entity.
	ex: we will consider Books is connected to Authors using authod_ID feild and we will consider its 1:1 relation
 	Each book have single Author
	
	service bookshop {
    		entity Books : cuid {
        			title : String(30);
        			author : Association to one Author;
    			}

    		entity Author : cuid {
        			name : String(30);
        			authorfrom : Country;
    				}

	}
	when we run the command :  cds compile services.cds --to sql
	CREATE TABLE bookshop_Books (
  	ID NVARCHAR(36) NOT NULL,
  	title NVARCHAR(30),
  	author_ID NVARCHAR(36),		--> this feild author has been replaced with author_ID and ID is key feild 
					    for Author table hence author_ID is added
  	PRIMARY KEY(ID)
	);

	CREATE TABLE bookshop_Author (
  	ID NVARCHAR(36) NOT NULL,
  	name NVARCHAR(30),
  	authorfrom_code NVARCHAR(3),
  	PRIMARY KEY(ID)
	);

	also new navigation property will be added in metadata.
	You need to modify the bookshop-Books.csv file and add new column author_ID and add the values based on 
	Authors table
	  "value": [
    		{
      	"ID": "1bb5778e-4a6f-462a-9b64-bf9f7c782bbf",
      	"title": "Java",
      	"author_ID": null
    		},
	After adding the author_ID in csv file
	  "value": [
    	{
      	"ID": "1bb5778e-4a6f-462a-9b64-bf9f7c782bbf",
      	"title": "Java",
      	"author_ID": "1308b7d7-7ab1-4d04-aae6-6d4381ada692"
    	},

	<EntitySet Name="Books" EntityType="bookshop.Books">
	<NavigationPropertyBinding Path="author" Target="Author"/>
	</EntitySet>
	
	You can access Authors table using expand query - /odata/v4/bookshop/Books?$expand=author
	  "value": [
    	{
      	"ID": "1bb5778e-4a6f-462a-9b64-bf9f7c782bbf",
      	"title": "Java",
      	"author_ID": "1308b7d7-7ab1-4d04-aae6-6d4381ada692",
      	"author": {
        		"ID": "1308b7d7-7ab1-4d04-aae6-6d4381ada692",
        		"name": "Srinivas",
        		"authorfrom_code": null
      	}
    	},
	
	You can update the test.http file with below code
	GET http://localhost:4004/odata/v4/bookshop/Books?$expand=author

29. all code from qmacro is avaialbe in git : https://github.com/qmacro/capb2b.git

30. To get the common content for country, currency kind of database you can use
	npm i @sap/cds-common-content
	sap.common.Countries
	sap.common.Currencies
	sap.common.Languages
	sap.common.Timezones
	
	Before you use first you need to install using command : 
	npm i @sap/cds-common-content
	
	and import it in services.cds file
	using from '@sap/cds-common-content';

sinity
   
    
